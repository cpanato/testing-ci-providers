name: Sync Org Labels

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/sync-labels.yaml
      - labels.json
      - repos.yaml
  workflow_dispatch:

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install js-yaml
        run: npm install js-yaml

      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.PAT_GITHUB}}
          script: |
            var fs = require('fs');
            const yaml = require('js-yaml');
            // Read Repos to apply the labels
            const repos = yaml.load(fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/repos.yaml`, 'utf8'));

            // Labels to apply
            const labels = require(`${process.env.GITHUB_WORKSPACE}/labels.json`);

            // Gets current labels available on repo
            const currentLabels = repo =>
              github.paginate(
                github.rest.issues.listLabelsForRepo,
                repo,
                response => response.data.map(label => ({
                  name: label.name,
                  color: label.color,
                  description: label.description
                }))
              );

            // Syncs the config above with the target {owner, repo}
            const syncLabels = async repo => {
              const key = label => label.name.toLowerCase();

              const existing = new Map();
              (await currentLabels(repo)).forEach(label => existing.set(key(label), label));

              const updates = labels.map(async label => {
                try {
                  let label_k = key(label);
                  let current = existing.get(label_k);
                  existing.delete(label_k);
                  if (current == undefined) {
                    if (current = existing.get(label.alias)) {
                      core.info(`Renaming ${label.alias} to ${label.name}`);
                      return await github.rest.issues.updateLabel({
                        ...repo,
                        name: label.alias,
                        new_name: label.name,
                        description: label.description,
                        color: label.color
                      });
                    } else {
                      core.info(`Creating ${label.name}`);
                      return await github.rest.issues.createLabel({...repo, ...label});
                    }
                  } else if (current.color == label.color && current.description == label.description) {
                    core.info(`Skipping ${label.name}`);
                  } else {
                    core.info(`Updating ${label.name}`);
                    return await github.rest.issues.updateLabel({...repo, ...label});
                  }
                } catch (err) {
                  core.error(`Error applying ${label.name}: ${err}`);
                  throw err;
                }
              });

              if (existing.size > 0) {
                const orphaned = Array.from(existing.keys());
                core.warning(`Additional labels exist on ${repo.repo}: ${orphaned.join(', ')}`);
              }

              return Promise.all(updates);
            };

            for (const repo of repos['repos']) {
              await core.group(repo, () => syncLabels({
                owner: context.repo.owner,
                repo: repo
              }).catch(core.setFailed));
            };
