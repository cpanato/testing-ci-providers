name: Reusable

on:
  workflow_call:
    inputs:
      terraform_mode:
        required: false
        type: string
        default: 'plan'
        description: 'Mode to run terraform in.'

    secrets:
      GH_TOKEN:
        required: false
        description: 'Secret to post comments in a PR.'

concurrency: test1

jobs:
  terraform:
    name: Terraform
    runs-on: ['ubuntu-latest']
    permissions:
      contents: read
      pull-requests: write

    env:
      TF_VERB: ${{ inputs.terraform_mode }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ env.SHA }}

    - uses: hashicorp/setup-terraform@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
        check-latest: true

    - id: test123
      run: |
        echo "MYVARS=test.yaml,read.yaml,.ko2.yaml," >> $GITHUB_ENV
        echo ${{github.event_name}} 

    - uses: actions/github-script@v6
      if: ${{ (env.TF_VERB == 'plan') && (github.event_name == 'pull_request') }}
      id: set-result
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        result-encoding: string
        script: |
          var fs = require('fs');
          var festivals = process.env.MYVARS.split(",");
          var planData = `\n`;
          for (const planFiles of festivals) {
            if(planFiles == ""){
              continue;
            }
            const data = fs.readFileSync(planFiles, 'utf8');
            var tempOut = `<details><summary>Show Plan for ` + planFiles + `</summary>\n
            \`\`\`\n`
            + '\n' + data +
            `\`\`\`
            </details>\n
            `;

            console.log(tempOut);
            planData += tempOut;
            console.log(planData);
          };
          const output = `### Terraform Plan \n` + planData;

          return output;

    - name: maintain-comment
      uses: actions-cool/maintain-one-comment@v2
      if: ${{ (env.TF_VERB == 'plan') && (github.event_name == 'pull_request') }}
      with:
        token: ${{ secrets.GH_TOKEN }}
        body: "${{steps.set-result.outputs.result}}"
        body-include: '### Terraform Plan'

    - name: test terraform
      if: ${{ env.TF_VERB != 'plan' }} && github.event_name == 'pull_request'
      run: |
        echo test
